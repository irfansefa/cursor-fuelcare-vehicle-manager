# FuelCare Vehicle Manager
# Version: 1.0.0
# Description: A comprehensive vehicle management application for tracking expenses, fuel costs, and maintenance

# Project Structure
root_directories:
  - webapp
  - ios
  - android
  - database
  - api
  - docs

# Platform Structure (webapp, ios, android)
core:
  - utils
  - theme
  - config

components:
  - buttons
  - inputs
  - cards
  - layouts
  - navigation
  - feedback

features:
  - vehicle
  - fuel
  - expense
  - maintenance
  - station

feature_structure:
  domain:
    - entities
    - repositories
    - usecases
  data:
    - models
    - repositories
    - datasources
  presentation:
    - pages
    - widgets
    - state

# Naming Conventions
files:
  components: PascalCase
  domain:
    entities: PascalCase
    repositories: PascalCase
    usecases: PascalCase
  data:
    models: PascalCase
    repositories: PascalCase
    datasources: PascalCase

database:
  migrations: YYYYMMDDHHMMSS_description.sql
  tables: snake_case
  columns: snake_case

# Database Rules
migrations:
  directory: database/migrations
  naming: YYYYMMDDHHMMSS_description.sql
  rules:
    - Each entity change requires a new migration
    - No updates to previous migrations
    - Migrations must be reversible

# API Documentation
api:
  format: OpenAPI/Swagger
  location: api/swagger
  version_control: separate_files_per_major_version

# Security Requirements
authentication:
  type: JWT
  requirements:
    - Secure token storage
    - Token refresh mechanism
    - Role-based access control

database_security:
  - Row Level Security
  - Encrypted sensitive data
  - Prepared statements only

api_security:
  - Rate limiting
  - Input validation
  - CORS policies
  - HTTPS only

# Testing Requirements
testing:
  types:
    - Unit tests for domain logic
    - Integration tests for repositories
    - E2E tests for critical flows
    - UI component tests
  coverage:
    domain: 90%
    data: 80%
    presentation: 70%

# Performance Requirements
metrics:
  app_launch: < 3s
  api_response: < 500ms
  image_loading: < 1s

optimization:
  - Code splitting
  - Lazy loading
  - Asset optimization
  - Caching strategy 