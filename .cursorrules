# FuelCare Vehicle Manager
# Version: 1.0.0
# Description: A comprehensive vehicle management application for tracking expenses, fuel costs, and maintenance

# Best Practices
code_principles:
  solid:
    single_responsibility:
      - Each class/module should have only one reason to change
      - Split large classes into smaller, focused ones
      - Keep files under 300 lines of code
    open_closed:
      - Design for extension, not modification
      - Use interfaces and abstract classes
      - Implement new features by adding new code, not changing existing code
    liskov_substitution:
      - Derived classes must be substitutable for their base classes
      - Follow interface contracts strictly
      - Avoid breaking inherited behavior
    interface_segregation:
      - Keep interfaces small and focused
      - Split large interfaces into smaller ones
      - Clients should not depend on methods they don't use
    dependency_inversion:
      - Depend on abstractions, not concrete implementations
      - Use dependency injection
      - Define clear interface boundaries

  kiss:
    - Keep solutions as simple as possible
    - Avoid premature optimization
    - Prefer readability over cleverness
    - Use descriptive naming over comments
    - Break complex problems into smaller, manageable parts

  dry:
    - Avoid code duplication
    - Extract common functionality into shared utilities
    - Use composition over inheritance
    - Create reusable components and hooks
    - Implement shared business logic in services

file_organization:
  - Group related files together
  - Maintain consistent file structure across features
  - Keep implementation details private
  - Export only what's necessary
  - Use index files for clean imports

code_style:
  - Follow consistent naming conventions
  - Use meaningful variable and function names
  - Keep functions small and focused
  - Document public APIs and complex logic
  - Use type annotations effectively

error_handling:
  - Use typed errors for different scenarios
  - Provide meaningful error messages
  - Handle edge cases explicitly
  - Validate input data
  - Log errors appropriately

progress_tracking:
  - Update docs/PROGRESS.md whenever implementing RFC features
  - Mark items as "In Progress" when starting implementation
  - Mark items as "Completed" when passing all tests and reviews
  - Mark items as "Blocked" if dependencies or issues prevent progress
  - Add notes for blocked items explaining the blockage reason

# Project Structure
root_directories:
  - webapp
  - ios
  - android
  - database
  - api
  - docs

# Platform Structure (webapp, ios, android)
core:
  - utils
  - theme
  - config

components:
  - buttons
  - inputs
  - cards
  - layouts
  - navigation
  - feedback

features:
  - vehicle
  - fuel
  - expense
  - maintenance
  - station

feature_structure:
  domain:
    - entities
    - repositories
    - usecases
  data:
    - models
    - repositories
    - datasources
  presentation:
    - pages
    - widgets
    - state

# Naming Conventions
files:
  components: PascalCase
  domain:
    entities: PascalCase
    repositories: PascalCase
    usecases: PascalCase
  data:
    models: PascalCase
    repositories: PascalCase
    datasources: PascalCase

database:
  migrations: YYYYMMDDHHMMSS_description.sql
  tables: snake_case
  columns: snake_case

# Database Rules
migrations:
  directory: database/migrations
  naming: YYYYMMDDHHMMSS_description.sql
  rules:
    - Each entity change requires a new migration
    - No updates to previous migrations
    - Migrations must be reversible

# API Documentation
api:
  format: OpenAPI/Swagger
  location: api/swagger
  version_control: separate_files_per_major_version

# Security Requirements
authentication:
  type: JWT
  requirements:
    - Secure token storage
    - Token refresh mechanism
    - Role-based access control

database_security:
  - Row Level Security
  - Encrypted sensitive data
  - Prepared statements only

api_security:
  - Rate limiting
  - Input validation
  - CORS policies
  - HTTPS only

# Testing Requirements
testing:
  types:
    - Unit tests for domain logic
    - Integration tests for repositories
    - E2E tests for critical flows
  coverage:
    domain: 90%
    data: 80%

# Performance Requirements
metrics:
  app_launch: < 3s
  api_response: < 500ms
  image_loading: < 1s

optimization:
  - Code splitting
  - Lazy loading
  - Asset optimization
  - Caching strategy 